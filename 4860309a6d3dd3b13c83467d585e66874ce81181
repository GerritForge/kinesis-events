{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "532c780e_8843159b",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kinesis/KinesisEventsIT.java",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2021-03-31T07:36:09Z",
      "side": 1,
      "message": "Isn\u0027t that test going to be flaky? If we publish in less that 200ms test will fail",
      "range": {
        "startLine": 142,
        "startChar": 1,
        "endLine": 142,
        "endChar": 79
      },
      "revId": "4860309a6d3dd3b13c83467d585e66874ce81181",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc57ac25_77669ca2",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kinesis/KinesisEventsIT.java",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1015244
      },
      "writtenOn": "2021-03-31T09:22:01Z",
      "side": 1,
      "message": "Yes, if the creation of the kinesis stream completes and it is ACTIVE in less than 200ms the test will fail, but that\u0027s unlikely I would say: during my tests I found that it takes around 600ms for the stream to be ready, so 200ms seemed sufficiently safe, as it is 3 times less than that.\n\nWe have the same problem with the previous test right? if it took more than 1000ms for the stream to be ready the test would fail.\n\nI think concerns are in the nature of timeout-based tests.\n\nCan you think of a different way to simulate a temporary outage that eventually will succeed?",
      "parentUuid": "532c780e_8843159b",
      "range": {
        "startLine": 142,
        "startChar": 1,
        "endLine": 142,
        "endChar": 79
      },
      "revId": "4860309a6d3dd3b13c83467d585e66874ce81181",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6245921_e1369fa8",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kinesis/KinesisEventsIT.java",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1005270
      },
      "writtenOn": "2021-03-31T10:13:46Z",
      "side": 1,
      "message": "The question is what we want to test. In this test we are checking if aws library is working as expected which I believe is out of scope for this test. If we want to check if our integration with aws library works as expected we could mock com.amazonaws.services.kinesis.producer.KinesisProducer and check if we are setting correct params and what will happen if we throw TimeoutException.\n\nWDYT?",
      "parentUuid": "cc57ac25_77669ca2",
      "range": {
        "startLine": 142,
        "startChar": 1,
        "endLine": 142,
        "endChar": 79
      },
      "revId": "4860309a6d3dd3b13c83467d585e66874ce81181",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3f6b44_1d6b12de",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kinesis/KinesisEventsIT.java",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1015244
      },
      "writtenOn": "2021-03-31T15:11:36Z",
      "side": 1,
      "message": "I am not sure that\u0027s the case. We are testing the send functionality of the broker, not the library directly.\n\nWe are testing that when when the kinesis broker sends messages, temporary failures will be retried: the fact we are using KPL to achieve that it\u0027s an implementation detail.\n\nWe could have achieved the same thing by implementing a ...while (failure) { retry }... logic for example. \n\nRetries are a best practice approach advocated by AWS and I think it is important that we ensure this code implements that,. that is why I introduced the PublishResult return value, to bake into the return type that multiple attempts should be tried.",
      "parentUuid": "f6245921_e1369fa8",
      "range": {
        "startLine": 142,
        "startChar": 1,
        "endLine": 142,
        "endChar": 79
      },
      "revId": "4860309a6d3dd3b13c83467d585e66874ce81181",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}